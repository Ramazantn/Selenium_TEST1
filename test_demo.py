# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from webdriver_manager.chrome import ChromeDriverManager

#Python da Yapılan Testler Selenium Kullanılarak Bir Sekilde Yapılmıştır.Düzenli Görünmesi İçin Tek Dosyada Birleştirilerek ChromeDriverManager import edilmiştir.

class test_demo():

  def setup_method(self, method):
    self.driver = webdriver.Chrome(ChromeDriverManager().install())
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_mission1(self):  # invalid login Username Python da hiçlik gönderilerek denenmiştir
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1366, 728)
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"error\"]").text == "Epic sadface: Username is required"
  
  def test_mission2(self):  #invalid login pasword 
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1366, 728)
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("standard_user")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    assert self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"error\"]").text == "Epic sadface: Password is required"
  
  def test_mission3(self):  #invalid login username(False)-password(True)
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1366, 728)
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("locked_out_user")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").send_keys("secrret_sauce")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"error\"]").text == "Epic sadface: Username and password do not match any user in this service"

  def test_mission4(self):  # invalid login Username-password (ikiside false)
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1366, 728)
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("1")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").send_keys("1")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    assert self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"error\"]").text == "Epic sadface: Username and password do not match any user in this service"
  
  def test_mission5(self):  # Login Succesful : Pythondan farklı olarak Seleniumda başarılı giris yapıldığı sol giriş sayfasında bulunan product yazısı ile kontrol edilmiştir.
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1366, 728)
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("standard_user")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").send_keys("secret_sauce")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".title").text == "Products"
  
  def test_mission6(self):  #Sayfada bulunan urun sayısı
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1366, 728)
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("standard_user")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").send_keys("secret_sauce")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    self.vars["productCount"] = len(self.driver.find_elements(By.XPATH, "//div[@class=\'inventory_item\']"))
    assert(self.vars["productCount"] == 6)

  def test_mission7(self):  # Sepete backpack cıkarma ekleme yapılması
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1366, 728)
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("standard_user")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").send_keys("secret_sauce")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"remove-sauce-labs-backpack\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"add-to-cart-sauce-labs-backpack\"]").click()
  
  def test_mission8(self):  # Üsüste 3 defa yanlış username-password girilmesi
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1366, 728)
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("standard_user")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").send_keys("secret_sauce")
    self.driver.find_element(By.CSS_SELECTOR, ".login_wrapper-inner").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("aaa")
    self.driver.find_element(By.CSS_SELECTOR, ".login_wrapper-inner").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").send_keys("000")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, ".login_wrapper-inner").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("bbb")
    self.driver.find_element(By.CSS_SELECTOR, ".login_wrapper-inner").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").send_keys("111")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, ".login_wrapper-inner").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("ccc")
    self.driver.find_element(By.CSS_SELECTOR, ".login_wrapper-inner").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").send_keys("222")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"error\"]").text == "Epic sadface: Username and password do not match any user in this service"

  def test_mission9(self):  # Listede bulunan urunlerin yüksek fiyattan düsük fiyata göre sıralanması
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1366, 728)
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("standard_user")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").send_keys("secret_sauce")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"product_sort_container\"]").click()
  
  
#                       Not: Pytest- Seleniumu Karşılaştırması
#
#  Erismek istediğimiz dosyaların Locatorları açısından  selenium bunları kendisi sunduğu için avantajlı.
#  Excell vb dış kaynaktan data temin etmemiz gerektiğimiz zaman ve constants gibi bir yapı kullamak gerektiğinde Pytest tercih edilmesi daha uygun olur.
#  
# Selenium clean code ve kendini tekrar etmeme açısından olumsuz özelliğe sahip gibi göründüğünden dolayı;
#  yazılan bir kodun 3. kişi tarafından okunması durumunda Pytest daha anlaşılır olabilmektedir.
#
#Nihayetinde her iki koddan hangisinin tercih edileceği durumu; Projenin amacı, içeriğine göre şekillenmektedir.
#Örneğin bir sınıf listesi üzerinde test yapıyorsak dışarıdan veri almamız gerekriği için Pytest daha mantıklıdır.
#Hangisi tercik edilirse edilsin test mümkünse projede süre kısıtlaması yoksa iki taraftada yapılmalı ve karşılaştırılarak kod düzenlenmelidir.  
#
